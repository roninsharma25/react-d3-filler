{"version":3,"sources":["logo.svg","components/Filler.jsx","components/HomePage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Filler","props","state","playerScores","playerBoxes","currentPlayer","prevColors","playerArrows","winner","changeColor","bind","getAdjacentIndices","this","main","updateText","changeColors","colors","allObjs","d3","_groups","forEach","color","index","style","entry","indexOf","dim","start","delta","size","x","className","flag","board","generateBoardColors","data","y","i","j","push","select","text","newBoxes","attr","colorsTemp","Array","map","arr","fill","index1","ele","index2","filter","Math","floor","random","length","generateData","constantData","height","width","border","svg","append","groups","selectAll","concat","enter","on","target","__data__","update","textColor","titleSize","player1Arrow","player2Arrow","setState","updateBoardText","prevPlayerBoxes","allIndices","num","newIndices","getNewIndices","item","includes","newScores","updatedColors","changeOpacity","checkEndGame","player1Score","player2Score","gameOver","indices","inputColor","allRects","newRects","rectIndices","rectIndex","rect","transition","duration","currentIndex","above","below","right","left","Component","HomePage","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5ecb2b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport '../App.css';\nimport * as d3 from 'd3';\n\nexport default class Filler extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerScores: [1, 1],\n            playerBoxes: [[90], [9]],\n            currentPlayer: 0,\n            prevColors: ['',''],\n            playerArrows: ['',''],\n            winner: null\n        }\n\n        this.changeColor = this.changeColor.bind(this);\n        this.getAdjacentIndices = this.getAdjacentIndices.bind(this);\n    }\n\n    componentDidMount() {\n        this.main()\n    }\n\n    componentDidUpdate() {\n        this.updateText();\n    }\n\n    // Resets all opacities and changes the specified ones\n    changeOpacity(changeColors) {\n        let colors = ['red', 'blue', 'green', 'white', 'purple', 'orange', 'yellow'];\n        let allObjs = d3.selectAll('.bottom')._groups[0];\n        colors.forEach((color, index) => {\n            d3.select(allObjs[index])\n                .style('opacity', 1.0)\n        })\n        \n        changeColors.forEach((entry) => {\n            if (entry !== '') {\n                d3.select(allObjs[colors.indexOf(entry)])\n                    .style('opacity', 0.1)\n            }\n        })\n    }\n\n    generateData(dim, start, delta, size, flag = false) {\n        let colors = ['red', 'blue', 'green', 'white', 'purple', 'orange', 'yellow'];\n        let board = this.generateBoardColors(dim[0]);\n        let data = [];\n        let x;\n        let y = start[1];\n        let color;\n        let className;\n\n        for (let i = 0; i < dim[0]; i++) {\n            x = start[0];\n            for (let j = 0; j < dim[1]; j++ ) {\n                color = flag ? colors[j] : board[i][j]; //colors[Math.floor(Math.random() * colors.length)];\n                className = flag ? 'bottom' : 'top';\n                data.push({'x': x, 'y': y, 'size': size, 'flag': flag, 'color': color, 'className': className});\n                x += delta[0];\n            }\n            y += delta[1];\n          }\n        return data;\n    }\n\n    updateText() {\n        if (this.state.currentPlayer) { // Player 2\n            d3.select('.Vis').select('.player2')\n                .text('Player 2 Score: ' + this.state.playerScores[1])\n        } else { // Player 1\n            d3.select('.player1')\n                .text('Player 1 Score: ' + this.state.playerScores[0])\n        }\n    }\n\n    updateBoardText(newBoxes) {\n        let allObjs = d3.selectAll('.board')._groups[0];\n\n        newBoxes[0].forEach((index) => {\n            d3.select(allObjs[index])\n                .attr('visibility', 'visible')\n                .text('1')\n        })\n\n        newBoxes[1].forEach((index) => {\n            d3.select(allObjs[index])\n                .attr('visibility', 'visible')\n                .text('2')\n        })\n    }\n\n    generateBoardColors() {\n        let colors = ['red', 'blue', 'green', 'white', 'purple', 'orange', 'yellow'];\n        let dim = 10;\n\n        let colorsTemp;\n\n        let board = [...Array(dim)].map((arr) => Array(dim).fill(0));\n        board.forEach((arr, index1) => {\n            arr.forEach((ele, index2) => {\n                colorsTemp = [...colors]; // Create copy\n\n                // Remove left entry from temp list if it exists\n                if (index2 >= 1) colorsTemp = colorsTemp.filter((color) => {\n                    return color !== board[index1][index2-1];\n                })\n\n                // Remove above entry from temp list if it exists\n                if (index1 >= 1) colorsTemp = colorsTemp.filter((color) => {\n                    return color !== board[index1-1][index2];\n                })\n                // Chose a random color and update the board\n                board[index1][index2] = colorsTemp[Math.floor(Math.random() * colorsTemp.length)]\n            })\n        })\n\n        return board;\n    }\n    \n    main() {\n        let data = this.generateData(...[[10, 10], [150, 75], [40, 40], 40]);\n        let constantData = this.generateData(...[[1, 7], [50, 515], [90, 100], 50, true]);\n        let { height, width, border } = this.props;\n\n        let svg = d3.select('.Vis')\n            .append('svg')\n            .attr('height', height)\n            .attr('width', width)\n            .style('border', border)\n        \n        let groups = svg.selectAll('.groups')\n            .data(data.concat(constantData))\n            .enter()\n            .append('g')\n\n        groups.append('rect')\n            .attr('x', (data) => (data.x))\n            .attr('y', (data) => (data.y))\n            .attr('height', (data) => (data.size))\n            .attr('width', (data) => (data.size))\n            .style('fill', (data) => (data.color))\n            .attr('stroke', 'black')\n            .attr('class', (data) => (data.className))\n            .on('click', (data) => {\n                if (data.target.__data__.flag & d3.select(data.target).style('opacity')) this.update(data.target.__data__.color)\n            })\n        \n        groups.append('text')\n            .attr('x', (data) => (data.x + data.size/3))\n            .attr('y', (data) => (data.y + data.size*2/3))\n            .style('font-size', '20px')\n            .style('fill', 'black')\n            .text('1')\n            .attr('class', (data) => {\n                if (!data.flag) return 'board';\n                return 'stat';\n            })\n            .attr('visibility', 'hidden')\n\n        let textColor = 'white';\n        let titleSize = '25px';\n\n        let playerScores = this.state.playerScores;\n    \n        svg.append('text')\n            .attr('x', this.props.width / 4)\n            .attr('y', 50)\n            .attr('text-anchor', 'middle')\n            .style('fill', textColor)\n            .style('font-size', titleSize)\n            .style('text-decoration', 'underline')\n            .text('Player 1 Score: ' + playerScores[0])\n            .attr('class', 'player1')\n        \n        svg.append('text')\n            .attr('x', this.props.width * 3 / 4)\n            .attr('y', 50)\n            .attr('text-anchor', 'middle')\n            .style('fill', textColor)\n            .style('font-size', titleSize)\n            .style('text-decoration', 'underline')\n            .text('Player 2 Score: ' + playerScores[1])\n            .attr('class', 'player2')\n\n        let player1Arrow = svg.append('line')\n            .attr('x1', 25)\n            .attr('y1', 45)\n            .attr('x2', 75)\n            .attr('y2', 45)\n            .attr('stroke-width', 5)\n            .attr('stroke', 'white')\n            .attr('marker-end', 'url(#triangle)')\n        \n        let player2Arrow = svg.append('line')\n            .attr('x1', 370)\n            .attr('y1', 45)\n            .attr('x2', 420)\n            .attr('y2', 45)\n            .attr('stroke-width', 5)\n            .attr('stroke', 'white')\n            .attr('marker-end', 'url(#triangle)')\n            .style('visibility', 'hidden')\n        \n        svg.append(\"svg:defs\").append(\"svg:marker\")\n            .attr(\"id\", \"triangle\")\n            .attr(\"refX\", 6)\n            .attr(\"refY\", 6)\n            .attr(\"markerWidth\", 30)\n            .attr(\"markerHeight\", 30)\n            .attr(\"markerUnits\", \"userSpaceOnUse\")\n            .attr(\"orient\", \"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M 0 0 12 6 0 12 3 6\")\n            .style(\"fill\", \"red\");\n        \n        svg.append('text')\n            .attr('x', this.props.width / 2)\n            .attr('y', 50)\n            .attr('text-anchor', 'middle')\n            .style('fill', textColor)\n            .style('font-size', titleSize)\n            .style('text-decoration', 'underline')\n            .text('Winner: Player ' + this.state.winner)\n            .attr('class', 'winner')\n            .style('visibility', 'hidden')\n        \n        this.setState({playerArrows: [player1Arrow, player2Arrow]})\n        this.updateBoardText(this.state.playerBoxes);\n    }\n\n    update(color) {\n        let prevPlayerBoxes = this.state.playerBoxes[this.state.currentPlayer];\n        let allIndices = prevPlayerBoxes;\n        allIndices.forEach(num => allIndices = allIndices.concat(this.getAdjacentIndices(num)));\n\n        let newIndices = prevPlayerBoxes.concat(this.getNewIndices(allIndices, color));\n        newIndices = newIndices.filter((item, index) => newIndices.indexOf(item) === index);\n\n        // Remove indices belonging to the other player\n        newIndices = newIndices.filter((item) => !this.state.playerBoxes[1 - this.state.currentPlayer].includes(item));\n\n        let playerScores = this.state.playerScores;\n        let playerBoxes = this.state.playerBoxes;\n        let prevColors = this.state.prevColors;\n\n        this.changeColor(newIndices, color);\n        let updatedColors = this.state.currentPlayer ? [prevColors[0], color] : [color, prevColors[1]];\n        this.changeOpacity(updatedColors)\n        this.setState({prevColors: updatedColors})\n\n        let newBoxes;\n        let newScores;\n        \n        if (this.state.currentPlayer) { // Player 2\n            newBoxes = [playerBoxes[0], newIndices];\n            newScores = [playerScores[0], newIndices.length];\n        } else { // Player 1\n            newBoxes = [newIndices, playerBoxes[1]];\n            newScores = [newIndices.length, playerScores[1]];\n        }\n\n        this.setState({playerBoxes: newBoxes});\n        this.setState({playerScores: newScores});\n        this.state.playerArrows[this.state.currentPlayer]\n            .style('visibility', 'hidden')\n        this.state.playerArrows[1 - this.state.currentPlayer]\n            .style('visibility', 'visible')\n        this.setState({currentPlayer: 1 - this.state.currentPlayer});\n\n        this.updateBoardText(newBoxes)\n        this.checkEndGame(newScores);\n    }\n\n    checkEndGame(newScores) {\n        let player1Score = newScores[0];\n        let player2Score = newScores[1];\n        if (player1Score + player2Score === 10) {\n            let winner = (player1Score > player2Score) ? 1 : (player2Score > player1Score) ? 2 : 'tie';\n            this.setState({winner: winner});\n            this.gameOver(winner)\n        }   \n    }\n\n    // Hide Arrows and Player Scores and Show Winner Text\n    gameOver(winner) {\n        [d3.select('.player2'), d3.select('.player1'), ...this.state.playerArrows].forEach((item) => {\n            item.style('visibility', 'hidden')\n        })\n        d3.select('.winner')\n            .text(() => {\n                return winner !== 'tie' ? 'Winner: Player ' + winner : 'Tie'\n            })\n            .style('visibility', 'visible')\n        \n        d3.selectAll('rect')\n            .on('click', null)\n            .style('opacity', 1.0)\n    }\n\n    getNewIndices(indices, inputColor) {\n        let allRects = d3.selectAll('rect')._groups[0];\n        let newRects = [];\n\n        indices.forEach((num) => {\n            let temp = allRects[num].__data__.color === inputColor ? newRects.push(num) : null;\n        })\n\n        return newRects;\n    }\n\n    changeColor(rectIndices, color) {\n        rectIndices.forEach((rectIndex) => {\n            let rect = d3.selectAll('rect')._groups[0][rectIndex];\n\n            d3.select(rect)\n                .transition()\n                .duration(2000)\n                .style('fill', color)\n        })\n    }\n\n    getAdjacentIndices(currentIndex) {\n        let dim = 10;\n        let maxIndex = 99;\n\n        let above = currentIndex - dim;\n        let below = currentIndex + dim;\n        let right = currentIndex + 1;\n        let left = currentIndex - 1;\n\n        let indices = [];\n\n        if (above >= 0) {\n            indices.push(above);\n        }\n\n        if (below <= maxIndex) {\n            indices.push(below);\n        }\n\n        if (currentIndex % dim !== dim - 1) {\n            indices.push(right);\n        }\n\n        if (currentIndex % dim !== 0) {\n            indices.push(left);\n        }\n\n        return indices;        \n    }\n\n    render() {\n        return (\n            <div className=\"Vis\"></div>\n        )\n    }\n          \n}\n","import React, { Component } from 'react';\nimport Filler from './Filler';\nimport '../App.css';\n\nexport default class HomePage extends Component {\n    render() {\n        return (\n            <Filler height={600} width={700} border='5px solid white'/>\n        )\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport HomePage from './components/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <HomePage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}