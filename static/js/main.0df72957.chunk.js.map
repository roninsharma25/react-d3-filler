{"version":3,"sources":["logo.svg","components/Filler.jsx","components/HomePage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Filler","props","state","playerScores","playerBoxes","currentPlayer","changeColor","bind","getAdjacentIndices","this","main","updateText","dim","start","delta","size","x","color","flag","colors","data","y","i","j","Math","floor","random","length","push","d3","select","text","generateData","constantData","height","width","border","svg","append","attr","style","textColor","selectAll","concat","enter","on","target","__data__","update","titleSize","prevPlayer1Boxes","allIndices","forEach","num","newIndices","getNewIndices","filter","item","index","indexOf","includes","setState","indices","inputColor","allRects","_groups","newRects","rectIndices","rectIndex","rect","transition","duration","currentIndex","above","below","right","left","className","Component","HomePage","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0df72957.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport '../App.css';\nimport * as d3 from 'd3';\n\nexport default class Filler extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerScores: [1, 1],\n            playerBoxes: [[90], [9]],\n            currentPlayer: 0\n        }\n\n        this.changeColor = this.changeColor.bind(this);\n        this.getAdjacentIndices = this.getAdjacentIndices.bind(this);\n    }\n\n    componentDidMount() {\n        this.main()\n    }\n\n    componentDidUpdate() {\n        this.updateText();\n    }\n\n    generateData(dim, start, delta, size, flag = false) {\n        let colors = ['red', 'blue', 'green', 'black', 'purple', 'white', 'yellow'];\n        let data = [];\n        let x;\n        let y = start[1];\n        let color;\n\n        for (let i = 0; i < dim[0]; i++) {\n            x = start[0];\n            for (let j = 0; j < dim[1]; j++ ) {\n                color = flag ? colors[j] : colors[Math.floor(Math.random() * colors.length)];\n                data.push({'x': x, 'y': y, 'size': size, 'flag': flag, 'color': color});\n                x += delta[0];\n            }\n            y += delta[1];\n          }\n        return data;\n    }\n\n    updateText() {\n        if (this.state.currentPlayer) { // Player 2\n            d3.select('.Vis').select('.player2')\n                .text('Player 2 Score: ' + this.state.playerScores[1])\n        } else { // Player 1\n            d3.select('.player1')\n                .text('Player 1 Score: ' + this.state.playerScores[0])\n        }\n    }\n    \n    main() {\n        let data = this.generateData(...[[10, 10], [150, 75], [40, 40], 40]);\n        let constantData = this.generateData(...[[1, 7], [50, 515], [90, 100], 50, true]);\n        let { height, width, border } = this.props;\n\n        let svg = d3.select('.Vis')\n            .append('svg')\n            .attr('height', height)\n            .attr('width', width)\n            .style('border', border)\n\n        let squares = svg.selectAll('rect')\n            .data(data.concat(constantData))\n            .enter()\n            .append('rect')\n        \n        let squareAttributes = squares\n            .attr('x', (data) => (data.x))\n            .attr('y', (data) => (data.y))\n            .attr('height', (data) => (data.size))\n            .attr('width', (data) => (data.size))\n            .style('fill', (data) => (data.color))\n            .attr('stroke', 'black')\n            .on('click', (data) => {\n                if (data.target.__data__.flag) this.update(data.target.__data__.color)\n            })\n        \n        let textColor = 'white';\n        let titleSize = '25px';\n\n        let playerScores = this.state.playerScores;\n    \n        svg.append('text')\n            .attr('x', this.props.width / 4)\n            .attr('y', 50)\n            .attr('text-anchor', 'middle')\n            .style('fill', textColor)\n            .style('font-size', titleSize)\n            .style('text-decoration', 'underline')\n            .text('Player 1 Score: ' + playerScores[0])\n            .attr('class', 'player1')\n        \n        svg.append('text')\n            .attr('x', this.props.width * 3 / 4)\n            .attr('y', 50)\n            .attr('text-anchor', 'middle')\n            .style('fill', textColor)\n            .style('font-size', titleSize)\n            .style('text-decoration', 'underline')\n            .text('Player 2 Score: ' + playerScores[1])\n            .attr('class', 'player2')\n\n    }\n\n    update(color) {\n        let prevPlayer1Boxes = this.state.playerBoxes[this.state.currentPlayer];\n        let allIndices = prevPlayer1Boxes;\n        allIndices.forEach(num => allIndices = allIndices.concat(this.getAdjacentIndices(num)));\n\n        let newIndices = prevPlayer1Boxes.concat(this.getNewIndices(allIndices, color));\n        newIndices = newIndices.filter((item, index) => newIndices.indexOf(item) === index);\n\n        // Remove indices belonging to the other player\n        newIndices = newIndices.filter((item) => !this.state.playerBoxes[1 - this.state.currentPlayer].includes(item));\n\n        let playerScores = this.state.playerScores;\n        let playerBoxes = this.state.playerBoxes;\n\n        this.changeColor(newIndices, color);\n\n        if (this.state.currentPlayer) { // Player 2 \n            this.setState({playerBoxes: [playerBoxes[0], newIndices]});\n            this.setState({playerScores: [playerScores[0], newIndices.length]});\n        } else { // Player 1\n            this.setState({playerBoxes: [newIndices, playerBoxes[1]]});\n            this.setState({playerScores: [newIndices.length, playerScores[1]]});\n        }\n        this.setState({currentPlayer: 1 - this.state.currentPlayer});\n    }\n\n    getNewIndices(indices, inputColor) {\n        let allRects = d3.selectAll('rect')._groups[0];\n        let newRects = [];\n\n        indices.forEach((num) => {\n            let color = allRects[num].__data__.color;\n            let temp = color === inputColor ? newRects.push(num) : null;\n        })\n\n        return newRects;\n    }\n\n    changeColor(rectIndices, color) {\n        rectIndices.forEach((rectIndex) => {\n            let rect = d3.selectAll('rect')._groups[0][rectIndex];\n\n            d3.select(rect)\n                .transition()\n                .duration(2000)\n                .style('fill', color)\n        })\n    }\n\n    getAdjacentIndices(currentIndex) {\n        let dim = 10;\n        let maxIndex = 99;\n\n        let above = currentIndex - dim;\n        let below = currentIndex + dim;\n        let right = currentIndex + 1;\n        let left = currentIndex - 1;\n\n        let indices = [];\n\n        if (above >= 0) {\n            indices.push(above);\n        }\n\n        if (below <= maxIndex) {\n            indices.push(below);\n        }\n\n        if (currentIndex % dim !== dim - 1) {\n            indices.push(right);\n        }\n\n        if (currentIndex % dim !== 0) {\n            indices.push(left);\n        }\n\n        return indices;        \n    }\n\n    render() {\n        return (\n            <div className=\"Vis\"></div>\n        )\n    }\n          \n}\n","import React, { Component } from 'react';\nimport Filler from './Filler';\nimport '../App.css';\n\nexport default class HomePage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Filler height={600} width={700} border='5px solid white'/>\n        )\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport HomePage from './components/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <HomePage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}